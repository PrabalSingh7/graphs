#include<list>

void prepareAdjList(vector<vector<int>> &edges, unordered_map<int,list<int>> &adj)    {
    
    for(int i=0 ; i<edges.size() ; i++)    {
        int u = edges[i][0];
        int v = edges[i][1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    
}

void dfs( int node, unordered_map<int,bool> &visited, unordered_map<int,list<int>> &adj, vector<int> &component )    {
    
    component.push_back(node);
    visited[node] = true;
    
    for(auto it : adj[node])    {
        if(!visited[it])
            dfs( it, visited, adj, component);
    }
    
}

vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)    {
    
    // preparing the adjacency list
    unordered_map<int,list<int>> adj;
    prepareAdjList(edges, adj);
    
    vector<vector<int>> result;
    unordered_map<int,bool> visited;
    
    for(int i=0 ; i<V ; i++)    {
        if(!visited[i])    {
            vector<int> component;
            dfs( i, visited, adj, component);
            result.push_back(component);
        }
    }
    
    return result;
}