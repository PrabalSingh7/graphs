#include<list>
#include<unordered_map>
#include<queue>

void prepareAdjList(vector <pair<int,int>> &edges, unordered_map<int,list<int>> &adj)    {
    for(int i=0; i<edges.size(); i++)    {
        int u = edges[i].first;
        int v = edges[i].second;
        adj[u].push_back(v);
    }
}

bool isCyclicDfs(int node, unordered_map<int,bool> &dfsVisited, unordered_map<int,list<int>> &adj, unordered_map<int,bool> &visited)    {
    
    visited[node]=true;
    dfsVisited[node]=true;
        
    for(auto neighbour : adj[node])    {
        
        if(!visited[neighbour])    {
            bool ans = isCyclicDfs(neighbour,dfsVisited,adj,visited);
            if(ans)
                return true;
        }
        // check for visited==true && dfsVisited==true(CYCLE present)
        else if(dfsVisited[neighbour]) 
            return true;
        
    }
    dfsVisited[node] = false;
    return false;    
}

int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
 
//     Preparing adjacenecy list for Directed Graphs
    unordered_map<int,list<int>> adj;
    prepareAdjList(edges,adj);
    
    unordered_map<int,bool> visited;
    unordered_map<int,bool> dfsVisited;
    for(int i=0; i<edges.size(); i++)    {
        if(!visited[i])    {
            bool ans = isCyclicDfs(i,dfsVisited,adj,visited);
            if(ans==1)
                return 1;
        }
    }
    return 0;
}