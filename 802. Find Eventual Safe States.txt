802. Find Eventual Safe States
Medium

2937

341

Add to List

Share
There is a directed graph of n nodes with each node labeled from 0 to n - 1. The graph is represented by a 0-indexed 2D integer array graph where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i].

A node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node).

Return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.

 

Example 1:

Illustration of graph
Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]]
Output: [2,4,5,6]
Explanation: The given graph is shown above.
Nodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.
Every path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6.
Example 2:

Input: graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]
Output: [4]
Explanation:
Only node 4 is a terminal node, and every path starting at node 4 leads to node 4.
 

Constraints:

n == graph.length
1 <= n <= 104
0 <= graph[i].length <= n
0 <= graph[i][j] <= n - 1
graph[i] is sorted in a strictly increasing order.
The graph may contain self-loops.
The number of edges in the graph will be in the range [1, 4 * 104].
Accepted
102,361
Submissions
186,360



class Solution {
public:
//     bool dfs(vector<vector<int>>& graph,vector<int>& color,int node)
//     {
//         color[node]=1;  // Initially assume that the node is unsafe.
        
//         for(auto cur : graph[node])
//             if((color[cur]==0 && dfs(graph,color,cur)) || color[cur]==1)
//                 return true;
        
//         color[node]=2;  // If there is no cycle mark node as safe.
//         return false;
//     }
//     vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
//         vector<int> color(graph.size()),result;
		
// 		// If node is visited and safe or unvisited and does not contain cycle then add it to the answer.
//         for(int i=0;i<graph.size();i++)
//             if(color[i]==2 ||  !dfs(graph,color,i))
//                 result.push_back(i);
                
//         return result;
//     }



vector<int> eventualSafeNodes(vector<vector>& graph) {

    int i, j, n = graph.size(), m = graph[0].size();
	
    vector<int> res;
	vector<int> in(n, 0);
    vector<vector<int>> deg(n, vector<int>());
	
    queue<int> q;
    
    for (i = 0; i < n; i++) {
        for (j = 0; j < graph[i].size(); j++) {
            
            deg[graph[i][j]].push_back(i); 
            in[i]++;
            
        }
    }
    
    for (i = 0; i < n; i++) {
        if (in[i] == 0) {
            q.push(i);
            cout << i << " ";
        }
    }
    
    while (!q.empty()) {
        i = q.front();
        q.pop();
        res.push_back(i);
        for (auto c: deg[i]) {
            in[c]--;
            
            if (in[c] == 0) q.push(c);
        }
    }
    
    sort(res.begin(), res.end());
    
    return res;
}
};
