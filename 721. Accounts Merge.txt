721. Accounts Merge
Medium

4980

863

Add to List

Share
Given a list of accounts where each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account.

Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.

After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. The accounts themselves can be returned in any order.

 

Example 1:

Input: accounts = [["John","johnsmith@mail.com","john_newyork@mail.com"],["John","johnsmith@mail.com","john00@mail.com"],["Mary","mary@mail.com"],["John","johnnybravo@mail.com"]]
Output: [["John","john00@mail.com","john_newyork@mail.com","johnsmith@mail.com"],["Mary","mary@mail.com"],["John","johnnybravo@mail.com"]]
Explanation:
The first and second John's are the same person as they have the common email "johnsmith@mail.com".
The third John and Mary are different people as none of their email addresses are used by other accounts.
We could return these lists in any order, for example the answer [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'], 
['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted.
Example 2:

Input: accounts = [["Gabe","Gabe0@m.co","Gabe3@m.co","Gabe1@m.co"],["Kevin","Kevin3@m.co","Kevin5@m.co","Kevin0@m.co"],["Ethan","Ethan5@m.co","Ethan4@m.co","Ethan0@m.co"],["Hanzo","Hanzo3@m.co","Hanzo1@m.co","Hanzo0@m.co"],["Fern","Fern5@m.co","Fern1@m.co","Fern0@m.co"]]
Output: [["Ethan","Ethan0@m.co","Ethan4@m.co","Ethan5@m.co"],["Gabe","Gabe0@m.co","Gabe1@m.co","Gabe3@m.co"],["Hanzo","Hanzo0@m.co","Hanzo1@m.co","Hanzo3@m.co"],["Kevin","Kevin0@m.co","Kevin3@m.co","Kevin5@m.co"],["Fern","Fern0@m.co","Fern1@m.co","Fern5@m.co"]]
 

Constraints:

1 <= accounts.length <= 1000
2 <= accounts[i].length <= 10
1 <= accounts[i][j].length <= 30
accounts[i][0] consists of English letters.
accounts[i][j] (for j > 0) is a valid email.
Accepted
285,633
Submissions
506,879



class Solution {
public:
    vector<int> parent;
    int findParent(int y) {
        while(parent[y] != y) {
            y = parent[y];
        }
        return parent[y];
    }
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
        if(accounts.size() == 1) {
            sort(accounts[0].begin()+1, accounts[0].end());
            return accounts;
        }
        //maps every email to the given source id
        unordered_map<string, int> emailmap;
        parent = vector<int>(accounts.size(), -1);
        //maps every account to the given name
        vector<string> namemap(accounts.size(), "");
        int i=0;
        //loop thorugh the accounts and initially map the parent of each account to itself and 
        //map the given name for each account. If an email is already found, then change the parent
        //of the current iterating account to the root parent of the account in which the email was already
        //found. 
        for(auto &x : accounts) {
            namemap[i] = x[0];
            parent[i] = i;
            for(int y=1; y<x.size(); y++) {
                if(emailmap.find(x[y]) != emailmap.end())
                    parent[findParent(i)] = findParent(emailmap[x[y]]);
                else
                    emailmap[x[y]] = i;
            }
            i++;
        }
        unordered_map<int, vector<string>> resmap;
        //loop the formed emailmap and cluster the emails by finding the root parent for each of the map
        for(auto &m : emailmap) {
            int p = findParent(m.second);
            resmap[p].push_back(m.first);
        }
        vector<vector<string>> results;
        //loop the formed cluster, sort it, and insert the name from the name map at the first position 
        for(auto &r : resmap) {
            sort(r.second.begin(), r.second.end());
            r.second.insert(r.second.begin(), namemap[r.first]);
            results.push_back(r.second);
        }
        return results;
    }
};