994. Rotting Oranges
Medium

8630

314

Add to List

Share
You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

Example 1:


Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 10
grid[i][j] is 0, 1, or 2.
Accepted
501,279
Submissions
956,110



class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        
        int n = grid.size();
        int m = grid[0].size();
        
        //creating a utility vector to avoid changes in original vector.
        int util[n][m];
        queue<pair<pair<int,int>,int>> q;
        int fresh = 0;
        
        for(int i=0; i<n; i++)    {
            for(int j=0; j<m; j++)  {
                if(grid[i][j]==2)   {
                    util[i][j] = 2;
                    q.push({{i,j},0});
                }    
                else if(grid[i][j]==1)  {
                    fresh++;
                    util[i][j] = 1;
                }
                else 
                    util[i][j] = 0;

            }
        }
      
        int tm = 0;
        // delta row and delta column
        int drow[] = {-1, 0, +1, 0};
        int dcol[] = {0, 1, 0, -1}; 
        int cnt = 0;
        
        while(!q.empty())   {
            
            int r = q.front().first.first;
            int c = q.front().first.second;
            int t = q.front().second;
            
            q.pop();
            tm = max(tm,t);
            
            //going in all four directions
            for(int i=0; i<4;i++)   {
                
                int dr = r + drow[i];
                int dc = c + dcol[i];
                
                if(dr>=0 && dr<n && dc>=0 && dc<m && util[dr][dc]==1 && grid[dr][dc]==1)    {
                    q.push({{dr,dc},t+1});
                    util[dr][dc]=2;
                    cnt++;
                }
            }
        }
        
        if(cnt==fresh)
            return tm;
        
        return -1;
    }
};