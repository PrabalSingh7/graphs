#include<list>
#include<unordered_map>
#include<queue>

void prepareAdjList(vector<vector<int>>& edges, unordered_map<int,list<int>> &adj)    {
    for(int i=0; i<edges.size(); i++)    {
        int u = edges[i][0];
        int v = edges[i][1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
}

// bool isCyclicBfs(int src, unordered_map<int,list<int>> &adj, unordered_map<int,bool> &visited)    {
    
//     queue<int> q;
//     unordered_map<int,int> parent;
    
//     parent[src]=-1;
//     visited[src]=1;
//     q.push(src);
    
//     while(!q.empty())    {
//         int frontnode = q.front();
//         q.pop();
        
//         for(auto neighbour : adj[frontnode])    {
//             if(visited[neighbour]==true && neighbour != parent[frontnode])
//                 return true;
//             else if(!visited[neighbour])    {
//                 q.push(neighbour);
//                 visited[neighbour]=true;
//                 parent[neighbour]=frontnode;
//             }
//         }
//     }
    
//     return false;
// }

bool isCyclicDfs(int node, int parent, unordered_map<int,list<int>> &adj, unordered_map<int,bool> &visited)    {
    
    visited[node]=true;
        
    for(auto neighbour : adj[node])    {
        
        if(!visited[neighbour])    {
            bool ans = isCyclicDfs(neighbour,node,adj,visited);
            if(ans)
                return true;
        }
        else if(neighbour != parent)
            return true;
        
    }
return false;    
}


string cycleDetection (vector<vector<int>>& edges, int n, int m)    {
    
    // preparing adjacency list
    unordered_map<int,list<int>> adj;
    prepareAdjList(edges,adj);
    
    unordered_map<int,bool> visited;
    for(int i=0; i<edges.size(); i++)    {
        if(!visited[i])    {
            bool ans = isCyclicDfs(i,-1,adj,visited);
            if(ans==1)
                return "Yes";
        }
    }
    return "No";
}
