684. Redundant Connection
Medium

4703

326

Add to List

Share
In this problem, a tree is an undirected graph that is connected and has no cycles.

You are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.

Return an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.

 

Example 1:


Input: edges = [[1,2],[1,3],[2,3]]
Output: [2,3]
Example 2:


Input: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]
Output: [1,4]
 

Constraints:

n == edges.length
3 <= n <= 1000
edges[i].length == 2
1 <= ai < bi <= edges.length
ai != bi
There are no repeated edges.
The given graph is connected.
Accepted
247,892
Submissions
399,761


class disjointset {
private:
    vector<int> size, parent;
public:
    disjointset(int n)  {
        parent.resize(n+1, 0);
        size.resize(n+1, 1);
        for(int i=0; i<n; i++)
            parent[i]=i;
    }
    int findUPar(int node)   {
        if(node==parent[node])
            return node;
        return parent[node] = findUPar(parent[node]);
    }
    bool unionBySize(int u, int v)  {
        int pu = findUPar(u);
        int pv = findUPar(v);
        if(pu==pv)
            return false;
        if(size[pu]<size[pv])   {
            parent[pu] = pv;
            size[pv] += size[pu];
        }
        else   {
            parent[pv] = pu;
            size[pu] += size[pv];
        }
        return true;
    }
};

class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n = edges.size();
        vector<int> res;
        
        disjointset ds(n);
        
        for(int i=0; i<n; i++)  {
            if(ds.unionBySize(edges[i][0],edges[i][1])==false) {
                res.clear();
                res.push_back(edges[i][0]);
                res.push_back(edges[i][1]);
            }
        }
        
        return res;
    }
};