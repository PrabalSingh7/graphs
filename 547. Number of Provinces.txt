547. Number of Provinces
Medium

6331

269

Add to List

Share
There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.

Return the total number of provinces.

 

Example 1:


Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2
Example 2:


Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]
Output: 3
 

Constraints:

1 <= n <= 200
n == isConnected.length
n == isConnected[i].length
isConnected[i][j] is 1 or 0.
isConnected[i][i] == 1
isConnected[i][j] == isConnected[j][i]
Accepted
545,416
Submissions
862,646




class Solution {
public:
    

    void DFS(int node, unordered_map<int,bool> &visited, vector<int> &component, unordered_map<int,vector<int>> &adj )     {
        
        //pushing the current node in component
        component.push_back(node);
        
        // Mark the current node as visited and
        visited[node] = true;

        // Recur for all the neighbouring nodes of current node.
        for(auto it : adj[node])    {
            if(!visited[it])
                DFS(it, visited, component, adj);
        }
        
    }
    
    int findCircleNum(vector<vector<int>>& isConnected) {
        
        vector<vector<int>> dfs;
        int n = isConnected.size();
        
        unordered_map<int,bool> visited;
        for(int i=1; i<=n; i++)
            visited[i] = false;
        
        // to change adjacency matrix to list 
        unordered_map<int,vector<int>> adj(n);         
        for(int i=0;i<n;i++) {
            for(int j=0;j<n;j++) {
                if(isConnected[i][j] == 1 && i != j) {
                    // cout<<i<<" "<<j<<"\n";
                    adj[i+1].push_back(j+1); 
                    // adj[j+1].push_back(i+1); 
                }
            }
        }
        
        // // Printing ajd list
        // for(auto it : adj)  {
        //     cout<<it.first<<" : ";
        //     for(auto i : it.second)
        //         cout<<i<<", ";
        //     cout<<"\n";
        // }
        
        for(int i=1; i<=n; i++)  {
            if(!visited[i])  {
                vector<int> component;
                DFS(i, visited, component, adj);
                dfs.push_back(component);
            }
        }
        
        return dfs.size();
    }
};