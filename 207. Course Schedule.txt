207. Course Schedule
Medium

11685

452

Add to List

Share
There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.
 

Constraints:

1 <= numCourses <= 2000
0 <= prerequisites.length <= 5000
prerequisites[i].length == 2
0 <= ai, bi < numCourses
All the pairs prerequisites[i] are unique.
Accepted
1,044,169
Submissions
2,302,709




class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        
        // total number of nodes
        int n = numCourses;
        vector<int> vis(n, -1);
        
        //preparing adj list
        unordered_map<int,list<int>> adj;
        for(int i=0; i<prerequisites.size(); i++)   {
            int v = prerequisites[i][0];
            int u = prerequisites[i][1];
            adj[u].push_back(v);
        }
        
        //preparing indegree matrix
        vector<int> indegree(n, 0);
        for(auto it:adj)    {
            for(auto i:it.second)   {
                indegree[i]++;
            }
        }
        
        //pushing indegree==0 in queue initially
        queue<int> q;
        for(int i=0; i<n; i++)  {
            if(indegree[i]==0)  {
                vis[i] = 1;
                q.push(i);
            }
        }
        
        //do bfs topo
        while(!q.empty())   {
            int fnode = q.front();
            q.pop();
            vis[fnode] = 1;
            for(auto it:adj[fnode]) {
                indegree[it]--;
                if(indegree[it]==0) {
                    q.push(it);
                }
            }
        }
        
        for(int i=0; i<n; i++)  {
            if(vis[i]==-1)
                return false;
        }
        return true;
    }
};