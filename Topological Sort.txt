#include <bits/stdc++.h> 

void prepareAdjList(vector<vector<int>> &edges, unordered_map<int,list<int>> &adj)    {
    
    for(int i=0 ; i<edges.size() ; i++)    {
        int u = edges[i][0];
        int v = edges[i][1];
        
        adj[u].push_back(v);
    }
}

void topoSort( int node, unordered_map<int,bool> &visited, stack<int> &s, unordered_map<int,list<int>> &adj)    {
    
    visited[node] = true;
    for(auto neighbour : adj[node])    {
        if(!visited[neighbour])
            topoSort(neighbour,visited,s,adj);
    }
    
    //important step : distinguishes btw DFS and Topologiacal Sort
    s.push(node);
}

vector<int> topologicalSort(vector<vector<int>> &edges, int v, int e) {
    
    //preparing adjacency list
    unordered_map<int,list<int>> adj;
    prepareAdjList(edges,adj);
    
    //calling DFS topological Sort for all vertices
    unordered_map<int,bool> visited;
    stack<int> s;
    for(int i=0 ; i<v; i++)    {
        if(!visited[i])
            topoSort(i,visited,s,adj);
    }
    
    vector<int> topologicalOrder;
    while(!s.empty())    {
        topologicalOrder.push_back(s.top());
        s.pop();
    }
    
    return topologicalOrder;
}