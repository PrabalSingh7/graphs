#include<unordered_map>
#include<list>
#include<queue>


vector<int> shortestPath( vector<pair<int,int>> edges , int n , int m, int s , int t){
	
    // prepare adjacency list
    unordered_map<int,list<int>> adj;
	for(int i=0 ; i<edges.size() ; i++ )    {
        int u = edges[i].first;
        int v= edges[i].second;
        adj[u].push_back(v);
    }
    
    //do the required bfs
    unordered_map<int,bool> visited;
    unordered_map<int,int> parent;
    queue<int> q;
    
    q.push(s);
    parent[s] = -1;
    visited[s] = 1;
    
    while(!q.empty())    {
        
        int fnode = q.front();
        q.pop();
        
        for( auto neighbour : adj[fnode] )    {
            if(!visited[neighbour])    {
                visited[neighbour] = 1;
                parent[neighbour] = fnode;
                q.push(neighbour);
            }
        }
    }
    
    vector<int> result;
    int currNode = t;
    result.push_back(t);
    
    while(currNode != s)    {
        currNode = parent[currNode];
        result.push_back(currNode);
    }
    
    reverse(result.begin(),result.end());
    return result;
	
}
