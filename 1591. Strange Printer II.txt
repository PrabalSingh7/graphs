1591. Strange Printer II
Hard
511
15
Companies
There is a strange printer with the following two special requirements:

On each turn, the printer will print a solid rectangular pattern of a single color on the grid. This will cover up the existing colors in the rectangle.
Once the printer has used a color for the above operation, the same color cannot be used again.
You are given a m x n matrix targetGrid, where targetGrid[row][col] is the color in the position (row, col) of the grid.

Return true if it is possible to print the matrix targetGrid, otherwise, return false.

 

Example 1:


Input: targetGrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]
Output: true
Example 2:


Input: targetGrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]
Output: true
Example 3:

Input: targetGrid = [[1,2,1],[2,1,2],[1,2,1]]
Output: false
Explanation: It is impossible to form targetGrid because it is not allowed to print the same color in different turns.
 

Constraints:

m == targetGrid.length
n == targetGrid[i].length
1 <= m, n <= 60
1 <= targetGrid[row][col] <= 60
Accepted
8.7K
Submissions
14.8K
Acceptance Rate
58.7%


class Solution {
public:
    bool isPrintable(vector<vector<int>>& targetGrid) {
        int m = targetGrid.size();
        int n = targetGrid[0].size();
        unordered_map<int, vector<int>> hmap;

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int val = targetGrid[i][j];
        
                if (hmap.find(val) == hmap.end()) {
                    hmap[val] = {i, j, i, j};
                } 
                else {
                    hmap[val][0] = min(hmap[val][0], i);
                    hmap[val][1] = min(hmap[val][1], j);
                    hmap[val][2] = max(hmap[val][2], i);
                    hmap[val][3] = max(hmap[val][3], j);
                }
            }
        }

        int count = hmap.size();

        // for (auto it : hmap)    {
        //     cout<<it.first<<" = ";
        //     for(auto k : it.second)
        //         cout<<k<<" , ";
        //     cout<<"\n";
        // }
        
        for (int i = 0; i < count; i++) {
            int found = -1;
            
            for (auto &it : hmap) {
                int val = it.first;
                bool valid = true;
                
                for (int x = it.second[0]; x <= it.second[2]; x++) {
                    for (int y = it.second[1]; y <= it.second[3]; y++) {
                        if (targetGrid[x][y] != -1 && targetGrid[x][y] != val) {
                            valid = false;
                            break;
                        }
                    }
                }
                
                if (valid) {
                    found = val;
                    for (int x = it.second[0]; x <= it.second[2]; x++) {
                        for (int y = it.second[1]; y <= it.second[3]; y++) {
                            targetGrid[x][y] = -1;
                        }
                    }
                }
            }
            
            if (found != -1) {
                hmap.erase(found);
            } 
            else {
                return false;
            }
        }

        return true;
    }
};