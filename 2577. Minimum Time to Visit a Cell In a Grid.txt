2577. Minimum Time to Visit a Cell In a Grid
Hard
169
3
Companies
You are given a m x n matrix grid consisting of non-negative integers where grid[row][col] represents the minimum time required to be able to visit the cell (row, col), which means you can visit the cell (row, col) only when the time you visit it is greater than or equal to grid[row][col].

You are standing in the top-left cell of the matrix in the 0th second, and you must move to any adjacent cell in the four directions: up, down, left, and right. Each move you make takes 1 second.

Return the minimum time required in which you can visit the bottom-right cell of the matrix. If you cannot visit the bottom-right cell, then return -1.

 

Example 1:



Input: grid = [[0,1,3,2],[5,1,2,5],[4,3,8,6]]
Output: 7
Explanation: One of the paths that we can take is the following:
- at t = 0, we are on the cell (0,0).
- at t = 1, we move to the cell (0,1). It is possible because grid[0][1] <= 1.
- at t = 2, we move to the cell (1,1). It is possible because grid[1][1] <= 2.
- at t = 3, we move to the cell (1,2). It is possible because grid[1][2] <= 3.
- at t = 4, we move to the cell (1,1). It is possible because grid[1][1] <= 4.
- at t = 5, we move to the cell (1,2). It is possible because grid[1][2] <= 5.
- at t = 6, we move to the cell (1,3). It is possible because grid[1][3] <= 6.
- at t = 7, we move to the cell (2,3). It is possible because grid[1][3] <= 7.
The final time is 7. It can be shown that it is the minimum time possible.
Example 2:



Input: grid = [[0,2,4],[3,2,1],[1,0,4]]
Output: -1
Explanation: There is no path from the top left to the bottom-right cell.
 

Constraints:

m == grid.length
n == grid[i].length
2 <= m, n <= 1000
4 <= m * n <= 105
0 <= grid[i][j] <= 105
grid[0][0] == 0
 

Accepted
3.2K
Submissions
10.8K
Acceptance Rate
30.0%




C++ || Modified Dijkstra's Algorithm || Explained Approach || Commented code
_prabal_singh_
100 Days Badge 2022
4
a few seconds ago
Intuition
Some sort of modified dijkstra's algorth will be used.

Approach
MODIFICATION of DIJKSTRA'S ALGO :-

We will mainatain a time visited 2d array for keeping the track of minimum time to reach the node.
Different cases will occur :

the grid node is not yet visited && current time >= grid node time : simply upgarde the time array and push values in minheap.
the grid node is not yet visited && current time < grid node time : check the difference btw current time and grid node time ; it its even -> use grid node time in time array and push values in minheap , and if odd -> use grid node time + 1 in time array and push values in minheap.
the grid node is visited before && current time < time matrix value : here arise two subcases :-
3.a. if grid node value <= current time : simply upgarde the time array and push values in minheap.
3.b. if grid node value > current time : arise two sub-subcases : check the difference btw current time and grid node time :-
3.b.1. if it its even -> use grid node time in time array and push values in minheap .
3.b.2. if its odd -> use grid node time + 1 in time array and push values in minheap.
download (2).jfif

Complexity
Time complexity : O(mn * (mn)log(mn))
Space complexity : O(n*m)
Code
class Solution {
public:
    typedef pair<int,pair<int,int>> p;
    
    int minimumTime(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        
        //case when no moves can be made [can't reach the destination]
        if(grid[0][1]>1 && grid[1][0]>1)   return -1;
        
        //helping matrices
        vector<vector<int>> time(n, vector<int> (m,INT_MAX));
        vector<int> drow {0,-1,0,1};
        vector<int> dcol {-1,0,1,0};
        
        //minHeap for dijkstra's
        priority_queue<p,vector<p>,greater<p>> q;
        //pushing initial values of source
        q.push({0,{0,0}});
        time[0][0] = 0;
        int res = INT_MAX;
        
        while(!q.empty())   {
            auto it = q.top();
            q.pop();
            int r = it.second.first;
            int c = it.second.second;
            int t = it.first;
            
            //case when destination is reached (possible answer)
            if(r==n-1 && c==m-1)    
                res = min(res,t);
            
            //incrementing time for the next new moves
            t++;
            
            //checking all four directions
            for(int i=0; i<4; i++)  {
                int dr = r+drow[i];
                int dc = c+dcol[i];
                
                if(dr>=0&&dr<n&&dc>=0&&dc<m) {
                    if(time[dr][dc]==INT_MAX)   {
                        //case 1
                        if(grid[dr][dc]<=t) {
                            time[dr][dc] = t;
                            q.push({t,{dr,dc}});
                        }
                        //case 2
                        else {
                            int dif = grid[dr][dc]-t;
                            if(dif%2==0)    {
                                time[dr][dc] = grid[dr][dc];
                                q.push({grid[dr][dc],{dr,dc}});
                            }
                            else {
                                time[dr][dc] = grid[dr][dc]+1;
                                q.push({grid[dr][dc]+1,{dr,dc}});
                            }
                        }
                    }
                    else {
                        if(time[dr][dc]>t)  {
                            //case 3.a
                            if(grid[dr][dc]<=t)  {
                                time[dr][dc] = t;
                                q.push({t,{dr,dc}});                                
                            }
                            //case 3.b
                            else {
                                int dif = grid[dr][dc]-t;
                                if(dif%2==0)    {
                                    time[dr][dc] = grid[dr][dc];
                                    q.push({grid[dr][dc],{dr,dc}});
                                }
                                else {
                                    time[dr][dc] = grid[dr][dc]+1;
                                    q.push({grid[dr][dc]+1,{dr,dc}});
                                }
                            }
                        }
                    }
                }
            }
        }
        
        if(res==INT_MAX)
            return -1;
        return res;
    }
};
sad-thumbs-up-cat.3.meme.webp