class disjointSet   {
    private:
        vector<int> size, parent,rank;
    public:
        disjointSet(int n)  {
            size.resize(n);
            parent.resize(n);
            for(int i=0; i<n; i++)  {
                size[i] = 1;
                parent[i] = i;
                rank[i] = 0;
            }
        }
        int findUPar(int node)  {
            if(node==parent[node])  {
                return node;
            }
            return parent[node] = findUPar(parent[node]);
        }    
        void unionBySize(int u, int v)  {
            int uu = findUPar(u);
            int uv = findUPar(v);
            if(uu==uv)  {   return; }
            if(size[uu]<size[uv])   {
                parent[uu]=uv;
                size[uv]+=size[uu];
            }
            else    {
                parent[uv]=uu;
                size[uu]+=size[uv];
            }
        }
        void unionByRank(int u, int v)  {
            int uu = findUPar(u);
            int uv = findUPar(v);
            if(uu==uv)  { return; }
            if(rank[uu]<rank[uv])
                parent[uu]=uv;
            else if(rank[uu]>rank[uv])
                parent[uv]=uu;
            else {
                parent[uv]=uu;
                rank[uu]++;
            }
        }
};